{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[isLoggedIn,setIsLoggedIn]=useState(false);const[user,setUser]=useState(null);const[selectedBranch,setSelectedBranch]=useState(null);const[userLocation,setUserLocation]=useState(null);// Check for existing login state on app load\nuseEffect(()=>{const savedLogin=localStorage.getItem('isLoggedIn');const savedUser=localStorage.getItem('userEmail');const savedBranch=localStorage.getItem('selectedBranch');const savedLocation=localStorage.getItem('userLocation');if(savedLogin==='true'&&savedUser){setIsLoggedIn(true);setUser({email:savedUser});}if(savedBranch){try{setSelectedBranch(JSON.parse(savedBranch));}catch(error){console.error('Error parsing saved branch:',error);}}if(savedLocation){try{setUserLocation(JSON.parse(savedLocation));}catch(error){console.error('Error parsing saved location:',error);}}},[]);const login=userData=>{setIsLoggedIn(true);setUser(userData);localStorage.setItem('isLoggedIn','true');localStorage.setItem('userEmail',userData.email);};const logout=()=>{setIsLoggedIn(false);setUser(null);setSelectedBranch(null);setUserLocation(null);localStorage.removeItem('isLoggedIn');localStorage.removeItem('userEmail');localStorage.removeItem('selectedBranch');localStorage.removeItem('userLocation');localStorage.removeItem('rememberMe');};const selectBranch=branch=>{setSelectedBranch(branch);localStorage.setItem('selectedBranch',JSON.stringify(branch));};const updateUserLocation=location=>{setUserLocation(location);localStorage.setItem('userLocation',JSON.stringify(location));};const value={isLoggedIn,user,selectedBranch,userLocation,login,logout,selectBranch,updateUserLocation};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","isLoggedIn","setIsLoggedIn","user","setUser","selectedBranch","setSelectedBranch","userLocation","setUserLocation","savedLogin","localStorage","getItem","savedUser","savedBranch","savedLocation","email","JSON","parse","error","console","login","userData","setItem","logout","removeItem","selectBranch","branch","stringify","updateUserLocation","location","value","Provider"],"sources":["C:/Users/nanan/OneDrive/Desktop/FreshField (2)/FreshField/FreshField/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [userLocation, setUserLocation] = useState(null);\r\n\r\n  // Check for existing login state on app load\r\n  useEffect(() => {\r\n    const savedLogin = localStorage.getItem('isLoggedIn');\r\n    const savedUser = localStorage.getItem('userEmail');\r\n    const savedBranch = localStorage.getItem('selectedBranch');\r\n    const savedLocation = localStorage.getItem('userLocation');\r\n\r\n    if (savedLogin === 'true' && savedUser) {\r\n      setIsLoggedIn(true);\r\n      setUser({ email: savedUser });\r\n    }\r\n\r\n    if (savedBranch) {\r\n      try {\r\n        setSelectedBranch(JSON.parse(savedBranch));\r\n      } catch (error) {\r\n        console.error('Error parsing saved branch:', error);\r\n      }\r\n    }\r\n\r\n    if (savedLocation) {\r\n      try {\r\n        setUserLocation(JSON.parse(savedLocation));\r\n      } catch (error) {\r\n        console.error('Error parsing saved location:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const login = (userData) => {\r\n    setIsLoggedIn(true);\r\n    setUser(userData);\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n    localStorage.setItem('userEmail', userData.email);\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    setUser(null);\r\n    setSelectedBranch(null);\r\n    setUserLocation(null);\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('userEmail');\r\n    localStorage.removeItem('selectedBranch');\r\n    localStorage.removeItem('userLocation');\r\n    localStorage.removeItem('rememberMe');\r\n  };\r\n\r\n  const selectBranch = (branch) => {\r\n    setSelectedBranch(branch);\r\n    localStorage.setItem('selectedBranch', JSON.stringify(branch));\r\n  };\r\n\r\n  const updateUserLocation = (location) => {\r\n    setUserLocation(location);\r\n    localStorage.setItem('userLocation', JSON.stringify(location));\r\n  };\r\n\r\n  const value = {\r\n    isLoggedIn,\r\n    user,\r\n    selectedBranch,\r\n    userLocation,\r\n    login,\r\n    logout,\r\n    selectBranch,\r\n    updateUserLocation,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}