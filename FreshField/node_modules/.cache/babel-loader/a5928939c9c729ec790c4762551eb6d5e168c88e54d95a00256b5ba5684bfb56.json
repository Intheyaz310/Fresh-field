{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5000/api';\n\n// Helper function to get auth token from localStorage\nconst getAuthToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Helper function to set auth headers\nconst getAuthHeaders = () => {\n  const token = getAuthToken();\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      Authorization: `Bearer ${token}`\n    })\n  };\n};\n\n// API service class\nclass ApiService {\n  // Authentication endpoints\n  static async register(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Registration failed');\n      }\n\n      // Store token and user data\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  static async login(credentials) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      // Store token and user data\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  static logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  // User profile endpoints\n  static async getUserProfile() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/user/profile`, {\n        method: 'GET',\n        headers: getAuthHeaders()\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to get profile');\n      }\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  static async updateUserProfile(profileData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/user/profile`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(profileData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to update profile');\n      }\n\n      // Update stored user data\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const updatedUser = {\n        ...currentUser,\n        ...data.user\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get all users (admin only)\n  static async getAllUsers() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users`, {\n        method: 'GET',\n        headers: getAuthHeaders()\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to get users');\n      }\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Check if user is authenticated\n  static isAuthenticated() {\n    const token = getAuthToken();\n    return !!token;\n  }\n\n  // Get current user from localStorage\n  static getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  // Test API connection\n  static async testConnection() {\n    try {\n      const response = await fetch(`${API_BASE_URL.replace('/api', '')}`, {\n        method: 'GET'\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('API connection failed');\n    }\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","getAuthToken","localStorage","getItem","getAuthHeaders","token","Authorization","ApiService","register","userData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","setItem","user","login","credentials","logout","removeItem","getUserProfile","updateUserProfile","profileData","currentUser","parse","updatedUser","getAllUsers","isAuthenticated","getCurrentUser","testConnection","replace"],"sources":["C:/Users/nanan/OneDrive/Desktop/FreshField (2)/FreshField/FreshField/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Helper function to get auth token from localStorage\r\nconst getAuthToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// Helper function to set auth headers\r\nconst getAuthHeaders = () => {\r\n  const token = getAuthToken();\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { Authorization: `Bearer ${token}` })\r\n  };\r\n};\r\n\r\n// API service class\r\nclass ApiService {\r\n  // Authentication endpoints\r\n  static async register(userData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Registration failed');\r\n      }\r\n\r\n      // Store token and user data\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async login(credentials) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Login failed');\r\n      }\r\n\r\n      // Store token and user data\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('user', JSON.stringify(data.user));\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  // User profile endpoints\r\n  static async getUserProfile() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/user/profile`, {\r\n        method: 'GET',\r\n        headers: getAuthHeaders(),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to get profile');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateUserProfile(profileData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/user/profile`, {\r\n        method: 'PUT',\r\n        headers: getAuthHeaders(),\r\n        body: JSON.stringify(profileData),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to update profile');\r\n      }\r\n\r\n      // Update stored user data\r\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\r\n      const updatedUser = { ...currentUser, ...data.user };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all users (admin only)\r\n  static async getAllUsers() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/users`, {\r\n        method: 'GET',\r\n        headers: getAuthHeaders(),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Failed to get users');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  static isAuthenticated() {\r\n    const token = getAuthToken();\r\n    return !!token;\r\n  }\r\n\r\n  // Get current user from localStorage\r\n  static getCurrentUser() {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n\r\n  // Test API connection\r\n  static async testConnection() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL.replace('/api', '')}`, {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error('API connection failed');\r\n    }\r\n  }\r\n}\r\n\r\nexport default ApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}